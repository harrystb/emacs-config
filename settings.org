#+TITLE: Emacs settings
#+AUTHOR: Harrison St Baker
#+EMAIL: harry.stbaker@gmail.com
* Package repo configuration
  Add the melpa repository and make sure use-package is installed
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))
#+END_SRC

* Basic startup default changes
  Remove splash screen and echo area on startup
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t
      inhibit-startup-echo-area-message t)
#+END_SRC

* Evil package (VIM Emulation)
#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :config

  (evil-mode 1)
  (use-package evil-org
    :ensure t
    :config
    (evil-org-set-key-theme
     '(textobjects insert navigation additional shift todo heading))
    (add-hook 'org-mode-hook (lambda () (evil-org-mode))))

  (use-package powerline-evil
    :ensure t
    :config
    (powerline-evil-vim-color-theme)))
#+END_SRC

* ISpell package (spell checking)
#+BEGIN_SRC emacs-lisp
(use-package ispell
  :ensure t
  :bind
  (("C-c w" . 'ispell-word)
   ("C-c r" . 'ispell-region)))
#+END_SRC

* Projectile package (project navigation)
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :config
      (helm-mode 1)
      (setq helm-ff-file-name-history-recentf t)
  )
  (use-package projectile
    :ensure t
    :after helm
    :config
    (projectile-mode +1)
    (setq projectile-project-search-path '("~/dev"))
    (setq-default projectile-completion-system 'helm)
    (projectile-register-project-type 'gitea '(".gitea")
                      :compile "RHOST=hts-nms1 gmake install")
    :bind
    (("C-c p" . 'projectile-command-map)))
#+END_SRC

* Magit (git in emacs)
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t)
#+END_SRC

* Treemacs package (folder display and navigation)
#+BEGIN_SRC emacs-lisp
  (add-to-list 'image-types 'svg)
  (use-package treemacs
    :ensure t
    :config
    (use-package treemacs-evil
      :ensure t)
    (use-package treemacs-magit
      :ensure t)
    (use-package treemacs-projectile
      :ensure t)
    :bind
    (:map global-map
	  ("M-0" . treemacs-select-window)
	  ("C-x t 1"   . treemacs-delete-other-windows)
	  ("C-x t t"   . treemacs)
	  ("C-x t B"   . treemacs-bookmark)
	  ("C-x t C-t" . treemacs-find-file)
	  ("C-x t M-t" . treemacs-find-tag)))
#+END_SRC

* Rust Packages
** rust mode
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
      :ensure
      :config
	(add-hook 'rust-mode-hook (lambda () (setq indent-tabs-mode nil)))
	(add-hook 'rust-mode-hook 'electric-pair-mode)
	(setq rust-format-on-save t)
	(use-package flycheck
	    :ensure t
	    :config
	    (add-hook 'rust-mode-hook 'flycheck-mode)
	    (add-hook 'rust-mode-hook 'lsp))
      :bind
      (:map rust-mode-map
            ("C-c C-c C-r" . rust-run)
	    ("C-l j" . lsp-ui-imenu)
	    ("C-l ?" . lsp-find-references)
	    ("C-c C-c l" . flycheck-list-errors)
	    ("C-c C-c a" . lsp-execute-code-action)
	    ("C-c C-c r" . lsp-rename)
	    ("C-c C-c q" . lsp-workspace-restart)
	    ("C-c C-c Q" . lsp-workspace-shutdown)
	    ("C-c C-c s" . lsp-rust-analyzer-status))
    )

#+END_SRC
** lsp-mode
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :ensure
  :commands lsp
  :custom
  ;; what to use when checking on-save. "check" is default, I prefer clippy
  (lsp-rust-analyzer-cargo-watch-command "clippy")
  (lsp-eldoc-render-all t)
  (lsp-idle-delay 0.6)
  (lsp-rust-analyzer-server-display-inlay-hints t)
  :config
  (add-hook 'lsp-mode-hook 'lsp-ui-mode)
  (define-key lsp-mode-map (kbd "C-c l") lsp-command-map)) 

(use-package lsp-ui
  :ensure
  :commands lsp-ui-mode
  :custom
  (lsp-ui-peek-always-show t)
  (lsp-ui-sideline-show-hover t)
  (lsp-ui-doc-enable nil))
#+END_SRC
* Auto completion and snippets (Company/Yasnippet)
** Extra functions to be linked source: [[https://robert.kra.hn/posts/2021-02-07_rust-with-emacs/#:~:text=%20Configuring%20Emacs%20for%20Rust%20development%20%201,order%20to%20setup%20debugging%20support%20for...%20More%20]]
#+BEGIN_SRC emacs-lisp
(defun company-yasnippet-or-completion ()
  (interactive)
  (or (do-yas-expand)
      (company-complete-common)))

(defun check-expansion ()
  (save-excursion
    (if (looking-at "\\_>") t
      (backward-char 1)
      (if (looking-at "\\.") t
        (backward-char 1)
        (if (looking-at "::") t nil)))))

(defun do-yas-expand ()
  (let ((yas/fallback-behavior 'return-nil))
    (yas/expand)))

(defun tab-indent-or-complete ()
  (interactive)
  (if (minibufferp)
      (minibuffer-complete)
    (if (or (not yas/minor-mode)
            (null (do-yas-expand)))
        (if (check-expansion)
            (company-complete-common)
          (indent-for-tab-command)))))
#+END_SRC
** Company
#+BEGIN_SRC emacs-lisp
(use-package company
    :ensure
    :custom
	(company-idle-delay 0.5) ;; how long to wait until popup
	;; (company-begin-commands nil) ;; uncomment to disable popup
    :bind
	(:map company-active-map
		("C-n". company-select-next)
		("C-p". company-select-previous)
		("M-<". company-select-first)
		("M->". company-select-last))
	(:map company-mode-map
		("<tab>". tab-indent-or-complete)
		("TAB". tab-indent-or-complete))
    :config
    (add-hook 'rust-mode-hook 'company-mode))
#+END_SRC

** Yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure
  :config
  (yas-reload-all)
  (add-hook 'prog-mode-hook 'yas-minor-mode)
  (add-hook 'text-mode-hook 'yas-minor-mode))
#+END_SRC
* Flutter/Dart Packages
#+BEGIN_SRC emacs-lisp
	  (use-package dart-mode
    :ensure t
	      :hook
                 (dart-mode . flutter-test-mode)
                 (dart-mode . lsp)
                 (dart-mode . electric-pair-mode)
	      :config
		  (use-package lsp-dart :after lsp :ensure t)
		  (use-package lsp-treemacs :after lsp :ensure t))

	      (use-package flutter
		  :ensure t
		  :after dart-mode
		  :config 
		      (defun my-flutter-run-or-hot-reload ()
		      "Start `flutter run` or hot-reload if already running."
		      (interactive)
		      (if (flutter--running-p)
		      (flutter-hot-reload)
		      (flutter-run "-d windows")))
		      (defun my-flutter-before-save ()
		      (lsp-format-buffer))
		      (defun my-flutter-on-save-hot-reload ()
		      "Start `flutter run` or hot-reload if already running."
		      (lsp-format-buffer)
		      (if (flutter--running-p)
		      (flutter-hot-reload)
		       nil))
		      (add-hook 'flutter-test-mode-hook (lambda () (add-hook 'after-save-hook 'my-flutter-on-save-hot-reload nil 'make-it-local)))
		      (add-hook 'flutter-test-mode-hook (lambda () (add-hook 'before-save-hook 'my-flutter-before-save nil 'make-it-local)))
		  :bind (:map dart-mode-map
		      ("C-M-x" . #'my-flutter-run-or-hot-reload)))

	    (use-package yaml-mode :ensure t)
#+END_SRC
* Documentation
** Mermaid JS
#+BEGIN_SRC emacs-lisp
(use-package mermaid-mode
  :ensure t)
#+END_SRC
* Snippets & Templates
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :config
  (use-package yasnippet-snippets
    :ensure t)
  (yas-global-mode t)
  (define-key yas-minor-mode-map (kbd "<tab>") nil)
  (define-key yas-minor-mode-map (kbd "C-'") #'yas-expand)
  (add-to-list #'yas-snippet-dirs "~/.emacs.d/snippets")
  (yas-reload-all)
  (setq yas-prompt-functions '(yas-ido-prompt))
  (defun help/yas-after-exit-snippet-hook-fn ()
    (prettify-symbols-mode)
    (prettify-symbols-mode))
  (add-hook 'yas-after-exit-snippet-hook #'help/yas-after-exit-snippet-hook-fn)
  :diminish yas-minor-mode)
(add-hook 'find-file-hook 'auto-insert)
(use-package yatemplate
  :ensure t
  :config
  (setq templates-private-directory "~/.emacs.d/templates"))
  
#+END_SRC

* Colour theme - dark
#+BEGIN_SRC emacs-lisp
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-enabled-themes (quote (misterioso)))
 '(package-selected-packages (quote (use-package))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
#+END_SRC
* Custom Keybindings
** Increment or Decrement number at point
#+BEGIN_SRC emacs-lisp
(defun my-increment-number-decimal (&optional arg)
  "Increment the number forward from point by 'arg'."
  (interactive "p*")
  (save-excursion
    (save-match-data
      (let (inc-by field-width answer)
        (setq inc-by (if arg arg 1))
        (skip-chars-backward "0123456789")
        (when (re-search-forward "[0-9]+" nil t)
          (setq field-width (- (match-end 0) (match-beginning 0)))
          (setq answer (+ (string-to-number (match-string 0) 10) inc-by))
          (when (< answer 0)
            (setq answer (+ (expt 10 field-width) answer)))
          (replace-match (format (concat "%0" (int-to-string field-width) "d")
                                 answer)))))))
(defun my-decrement-number-decimal (&optional arg)
  (interactive "p*")
  (my-increment-number-decimal (if arg (- arg) -1)))
(global-set-key (kbd "C-<kp-add>") 'my-increment-number-decimal)
(global-set-key (kbd "C-<kp-subtract>") 'my-decrement-number-decimal)
(define-key function-key-map (kbd "<f13>") 'event-apply-super-modifier)
#+END_SRC
